name: ci_integration_tests_ubuntu
concurrency:
  group: ci_integration_tests_ubuntu-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - master
      - develop
      - trying
      - staging
      - 'rc/*'
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings
  LOGBAK_USER: ${{secrets.LOGBAK_USER}}  #LOCBAK_* for upload logs to server when test failed
  LOGBAK_PASSWORD: ${{secrets.LOGBAK_PASSWORD}}
  LOGBAK_SERVER: ${{secrets.LOGBAK_SERVER}}
jobs:
  prologue:
    name: prologue
    if: |
       github.event_name != 'push' ||
       ( github.event_name == 'push' &&
        ( github.ref == 'refs/heads/master' ||
          github.ref == 'refs/heads/trying' ||
          github.ref == 'refs/heads/staging' ||
          (github.ref == 'refs/heads/develop' && github.event.head_commit.author.name != 'bors[bot]') ||
          startsWith(github.ref, 'refs/heads/rc/')
        )
       ) || (github.repository_owner != 'nervosnetwork')
    runs-on: ubuntu-20.04
    outputs:
      os_skip: ${{ steps.prologue.outputs.os_skip }}
      job_skip: ${{ steps.prologue.outputs.job_skip }}
      linux_runner_label: ${{ steps.prologue.outputs.linux_runner_label }}
    steps:
    - uses: actions/checkout@v2
    - name: prologue
      id: prologue
      uses: ./.github/actions/ci_prologue
      with:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        COMMIT_MESSAGE: "${{github.event.head_commit.message}}"
        PR_COMMONS_BODY: "${{ github.event.pull_request.body }}"
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        LABELS: "${{ toJson(github.event.pull_request.labels.*.name) }}"
        GITHUB_REPOSITORY: ${{ github.repositoty }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
  ci_integration_build_ubuntu:
    name: ci_integration_build_ubuntu
    needs: prologue
    timeout-minutes: 70
    runs-on: ${{ needs.prologue.outputs.linux_runner_label }}
    steps:
    - uses: actions/checkout@v2
    - run: |
        if [[ ${{ needs.prologue.outputs.os_skip }} == run ]] && [[ ${{ needs.prologue.outputs.job_skip }} == run ]];then
            make integration_build
        else
          echo "skip job"
          exit 0
        fi
      shell: bash
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.sha }}-${{ runner.os }}-binary
        path: target/release/ckb
  ci_integration_tests_ubuntu:
    name: ci_integration_tests_ubuntu
    needs: [prologue, ci_integration_build_ubuntu]
    timeout-minutes: 70
    runs-on: ${{ needs.prologue.outputs.linux_runner_label }}
    steps:
    - uses: actions/checkout@v2
    - name: Clean download target
      run: rm -f target/release/ckb
    - uses: actions/download-artifact@v3
      with:
        name: ${{ github.sha }}-${{ runner.os }}-binary
        path: target/release/
    - run: |
        if [[ ${{ needs.prologue.outputs.os_skip }} == run ]] && [[ ${{ needs.prologue.outputs.job_skip }} == run ]];then
            devtools/ci/ci_main.sh
        else
          echo "skip job"
          exit 0
        fi
      shell: bash
    - name: upload log files
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}_integration.log
        path: ${{ env.CKB_INTEGRATION_TEST_TMP }}/integration.log
    env:
      RUNNER_LABEL: ${{ needs.prologue.outputs.linux_runner_label }}
  ci_cli_bats_test:
    name: ci_cli_bats_test
    needs: [prologue, ci_integration_build_ubuntu]
    runs-on: ${{ needs.prologue.outputs.linux_runner_label }}
    steps:
    - uses: actions/checkout@v2
    - name: Clean download target
      run: rm -f target/release/ckb
    - uses: actions/download-artifact@v3
      with:
        name: ${{ github.sha }}-${{ runner.os }}-binary
        path: target/release/
    - name: make and copy ckb binary and testcases to bats_testbed directory
      run: |
        make build
        mkdir -p /tmp/bats_testbed
        cp target/release/ckb /tmp/bats_testbed/
        cp util/app-config/src/tests/*.bats /tmp/bats_testbed/
        cp util/app-config/src/tests/cli_test.sh /tmp/bats_testbed/
        chmod a+x /tmp/bats_testbed/cli_test.sh
    - name: Setup BATS testing framework
      uses: mig4/setup-bats@v1.2.0
    - name: Setup Bats libs
      uses: brokenpip3/setup-bats-libs@0.1.0
      with:
        support-install: true
        support-path: /usr/lib/bats-support
        assert-install: true
        assert-path: /usr/lib/bats-assert
        detik-install: false
        file-install: false
    - name: checkout pre-synced file from ckb-asset repo
      uses: actions/checkout@v2
      with:
        repository: nervosnetwork/ckb-assets
    - name: init ckb bats testbed
      run: |
        mv cli_bats_env/ckb_mainnet_4000.json /tmp/bats_testbed/ckb_mainnet_4000.json
        cd /tmp/bats_testbed && ./ckb init --force && ./ckb import ckb_mainnet_4000.json
    - name: run bats cases
      run: |
        cd /tmp/bats_testbed && ./cli_test.sh
      shell: bash
    env:
      RUNNER_LABEL: ${{ needs.prologue.outputs.linux_runner_label }}
