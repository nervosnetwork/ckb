table Bytes {
    seq: [ubyte];
}

table Header {
    version:                uint32;
    parent_hash:            Bytes32;
    timestamp:              uint64;
    number:                 uint64;
    transactions_root:      Bytes32;
    witnesses_root:         Bytes32;
    proposals_hash:         Bytes32;
    difficulty:             Bytes32;
    nonce:                  uint64;
    proof:                  Bytes;
    uncles_hash:            Bytes32;
    uncles_count:           uint32;
    epoch:                  uint64;
    dao:                    Bytes;
}

table Block {
    header:                 Header;
    uncles:                 [UncleBlock];
    transactions:           [Transaction];
    proposals:              [ProposalShortId];
}

table BlockBody {
    transactions:           [Transaction];
}

table UncleBlock {
    header:                 Header;
    proposals:              [ProposalShortId];
}

table Transaction {
    version:        uint32;
    deps:           [CellDep];
    inputs:         [CellInput];
    outputs:        [CellOutput];
    outputs_data:   [Bytes];
    witnesses:      [Witness];
}

table Witness {
    data:           [Bytes];
}

table CellDep {
    tx_hash:        Bytes32;
    index:          uint32;
    block_hash:     Bytes32;
    dep_type:       uint8;
}

table OutPoint {
    tx_hash:        Bytes32;
    index:          uint32;
}

table CellInput {
    tx_hash:        Bytes32;
    index:          uint32;
    since:          uint64;
}

table CellOutput {
    capacity:       uint64;
    data_hash:      Bytes32;
    lock:           Script;
    type:           Script;
}

table Script {
    args:           [Bytes];
    code_hash:      Bytes32;
    hash_type:      uint8;
}

struct ProposalShortId {
    u0: uint8;
    u1: uint8;
    u2: uint8;
    u3: uint8;
    u4: uint8;
    u5: uint8;
    u6: uint8;
    u7: uint8;
    u8: uint8;
    u9: uint8;
}

struct Bytes32 {
    u0: uint8;
    u1: uint8;
    u2: uint8;
    u3: uint8;
    u4: uint8;
    u5: uint8;
    u6: uint8;
    u7: uint8;
    u8: uint8;
    u9: uint8;
    u10: uint8;
    u11: uint8;
    u12: uint8;
    u13: uint8;
    u14: uint8;
    u15: uint8;
    u16: uint8;
    u17: uint8;
    u18: uint8;
    u19: uint8;
    u20: uint8;
    u21: uint8;
    u22: uint8;
    u23: uint8;
    u24: uint8;
    u25: uint8;
    u26: uint8;
    u27: uint8;
    u28: uint8;
    u29: uint8;
    u30: uint8;
    u31: uint8;
}

struct TransactionInfo {
    block_hash:     Bytes32;
    block_number:   uint64;
    block_epoch:    uint64;
    index:          uint32;
}

table BlockExt {
    received_at:        uint64;
    total_difficulty:   Bytes32;
    total_uncles_count: uint64;
    has_verified:       bool;
    verified:           bool;
    txs_fees:           [uint64];
}

struct EpochExt {
    number:                             uint64;
    block_reward:                       uint64;
    remainder_reward:                   uint64;
    last_block_hash_in_previous_epoch:  Bytes32;
    start_number:                       uint64;
    length:                             uint64;
    difficulty:                         Bytes32;
}

table TransactionMeta {
    block_number:   uint64;
    epoch_number:   uint64;
    block_hash:     Bytes32;
    cellbase:       bool;
    bits:           Bytes;
    len:            uint32;
}
